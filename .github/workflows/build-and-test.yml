name: Build, Test and Deploy

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

permissions:
  contents: read
  actions: read
  security-events: write
  deployments: write
  statuses: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-test-deploy:
    runs-on: [self-hosted, Windows, X64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    # - name: Setup .NET
    #   uses: actions/setup-dotnet@v4
    #   with:
    #     dotnet-version: '8.0.x'
        
    - name: Restore dependencies
      run: dotnet restore src/Server/PasswordGeneratorSite.csproj
      
    - name: Build
      run: dotnet build src/Server/PasswordGeneratorSite.csproj --no-restore --configuration Release
      
    - name: Test
      run: dotnet test src/Server/PasswordGeneratorSite.csproj --no-build --configuration Release --verbosity normal
      
    - name: Enable maintenance mode
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: |
        $deployPath = "F:\Sites\pwdgen"
        $appOfflineSource = "src\Server\wwwroot\app_offline.htm"
        
        # Copy app_offline.htm to deployment folder to put site in maintenance mode
        # This releases file locks and shows styled maintenance page
        Copy-Item -Path $appOfflineSource -Destination "$deployPath\app_offline.htm" -Force
        Write-Host "Copied app_offline.htm - site is now in maintenance mode"
        
        # Wait a moment for IIS to detect the file and release locks
        Start-Sleep -Seconds 5
      shell: pwsh
      
    - name: Clear deployment folder (preserve app_offline.htm)
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: |
        $deployPath = "F:\Sites\pwdgen"
        if (Test-Path $deployPath) {
          $maxAttempts = 3
          $attempt = 1
          $success = $false
          
          while ($attempt -le $maxAttempts -and -not $success) {
            try {
              Write-Host "Attempt $attempt of $maxAttempts to clear deployment folder..."
              
              # Remove all files except app_offline.htm
              Get-ChildItem -Path $deployPath -Recurse | Where-Object { 
                $_.Name -ne "app_offline.htm" 
              } | Remove-Item -Recurse -Force -ErrorAction Stop
              
              Write-Host "Successfully cleared deployment folder (preserved app_offline.htm)"
              $success = $true
            }
            catch {
              Write-Host "Attempt $attempt failed: $($_.Exception.Message)"
              if ($attempt -lt $maxAttempts) {
                Write-Host "Waiting 5 seconds before retry..."
                Start-Sleep -Seconds 5
              }
              $attempt++
            }
          }
          
          if (-not $success) {
            Write-Error "Failed to clear deployment folder after $maxAttempts attempts"
            exit 1
          }
        }
      shell: pwsh
      
    - name: Publish to deployment folder
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: dotnet publish src/Server/PasswordGeneratorSite.csproj --no-build --configuration Release --output "F:\Sites\pwdgen"
      
    - name: Disable maintenance mode
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: |
        $deployPath = "F:\Sites\pwdgen"
        $appOfflinePath = "$deployPath\app_offline.htm"
        
        # Remove app_offline.htm to bring site back online
        if (Test-Path $appOfflinePath) {
          Remove-Item -Path $appOfflinePath -Force
          Write-Host "Removed app_offline.htm - site is now back online"
        } else {
          Write-Host "app_offline.htm not found - site should already be online"
        }
        
        # Wait a moment for IIS to detect the file removal
        Start-Sleep -Seconds 2
      shell: pwsh
      
    - name: Verify deployment
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: |
        $deployPath = "F:\Sites\pwdgen"
        $files = Get-ChildItem -Path $deployPath -Recurse | Measure-Object
        Write-Host "‚úÖ Deployment completed successfully!"
        Write-Host "üìÅ Total files deployed: $($files.Count)"
        Write-Host "üìç Deployment path: $deployPath"
      shell: pwsh
