name: Build, Test and Deploy

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

jobs:
  build-test-deploy:
    runs-on: [self-hosted, Windows, X64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    # - name: Setup .NET
    #   uses: actions/setup-dotnet@v4
    #   with:
    #     dotnet-version: '8.0.x'
        
    - name: Restore dependencies
      run: dotnet restore src/Server/PasswordGeneratorSite.csproj
      
    - name: Build
      run: dotnet build src/Server/PasswordGeneratorSite.csproj --no-restore --configuration Release
      
    - name: Test
      run: dotnet test src/Server/PasswordGeneratorSite.csproj --no-build --configuration Release --verbosity normal
      
    - name: Enable maintenance mode
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: |
        $deployPath = "F:\Sites\pwdgen"
        # Create simple app_offline.htm content
        $appOfflineContent = "<!DOCTYPE html><html><head><title>Site Updating | Password Generator</title><meta http-equiv='refresh' content='10'></head><body><h1>Site is being updated...</h1><p>Please wait while we deploy the latest version.</p></body></html>"
        
        # Create app_offline.htm to put site in maintenance mode
        # This releases file locks and shows maintenance page
        $appOfflineContent | Out-File -FilePath "$deployPath\app_offline.htm" -Encoding UTF8
        Write-Host "Created app_offline.htm - site is now in maintenance mode"
        
        # Wait a moment for IIS to detect the file and release locks
        Start-Sleep -Seconds 5
      shell: pwsh
      
    - name: Backup critical files
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: |
        $deployPath = "F:\Sites\pwdgen"
        $backupPath = "F:\Sites\pwdgen_backup"
        
        # Create backup directory
        if (-not (Test-Path $backupPath)) {
          New-Item -ItemType Directory -Path $backupPath -Force
        }
        
        # Backup critical files that need to be preserved/updated
        $criticalFiles = @("web.config", "404.html", "503.html")
        
        foreach ($file in $criticalFiles) {
          $sourcePath = "$deployPath\$file"
          $backupFilePath = "$backupPath\$file"
          
          if (Test-Path $sourcePath) {
            Copy-Item -Path $sourcePath -Destination $backupFilePath -Force
            Write-Host "Backed up: $file"
          } else {
            Write-Host "File not found for backup: $file"
          }
        }
      shell: pwsh
      
    - name: Clear deployment folder (preserve app_offline.htm)
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: |
        $deployPath = "F:\Sites\pwdgen"
        if (Test-Path $deployPath) {
          $maxAttempts = 3
          $attempt = 1
          $success = $false
          
          while ($attempt -le $maxAttempts -and -not $success) {
            try {
              Write-Host "Attempt $attempt of $maxAttempts to clear deployment folder..."
              
              # Remove all files except app_offline.htm
              Get-ChildItem -Path $deployPath -Recurse | Where-Object { 
                $_.Name -ne "app_offline.htm" 
              } | Remove-Item -Recurse -Force -ErrorAction Stop
              
              Write-Host "Successfully cleared deployment folder (preserved app_offline.htm)"
              $success = $true
            }
            catch {
              Write-Host "Attempt $attempt failed: $($_.Exception.Message)"
              if ($attempt -lt $maxAttempts) {
                Write-Host "Waiting 5 seconds before retry..."
                Start-Sleep -Seconds 5
              }
              $attempt++
            }
          }
          
          if (-not $success) {
            Write-Error "Failed to clear deployment folder after $maxAttempts attempts"
            exit 1
          }
        }
      shell: pwsh
      
    - name: Publish to deployment folder
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: dotnet publish src/Server/PasswordGeneratorSite.csproj --no-build --configuration Release --output "F:\Sites\pwdgen"
      
    - name: Restore critical files
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: |
        $deployPath = "F:\Sites\pwdgen"
        $backupPath = "F:\Sites\pwdgen_backup"
        
        # Restore critical files (overwrite with backed up versions or new versions from publish)
        $criticalFiles = @("web.config", "404.html", "503.html")
        
        foreach ($file in $criticalFiles) {
          $backupFilePath = "$backupPath\$file"
          $deployFilePath = "$deployPath\$file"
          
          # If we have a backup, restore it (this ensures our custom error pages are present)
          if (Test-Path $backupFilePath) {
            Copy-Item -Path $backupFilePath -Destination $deployFilePath -Force
            Write-Host "Restored from backup: $file"
          }
          # If the published version exists and we don't have a backup, keep the published version
          elseif (Test-Path $deployFilePath) {
            Write-Host "Using published version: $file"
          }
          # If neither exists, we have a problem
          else {
            Write-Warning "Critical file missing: $file"
          }
        }
        
        # Clean up backup directory
        if (Test-Path $backupPath) {
          Remove-Item -Path $backupPath -Recurse -Force
          Write-Host "Cleaned up backup directory"
        }
      shell: pwsh
      
    - name: Disable maintenance mode
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: |
        $deployPath = "F:\Sites\pwdgen"
        $appOfflinePath = "$deployPath\app_offline.htm"
        
        # Remove app_offline.htm to bring site back online
        if (Test-Path $appOfflinePath) {
          Remove-Item -Path $appOfflinePath -Force
          Write-Host "Removed app_offline.htm - site is now back online"
        } else {
          Write-Host "app_offline.htm not found - site should already be online"
        }
        
        # Wait a moment for IIS to detect the file removal
        Start-Sleep -Seconds 2
      shell: pwsh
      
    - name: Verify deployment
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: |
        $deployPath = "F:\Sites\pwdgen"
        $files = Get-ChildItem -Path $deployPath -Recurse | Measure-Object
        Write-Host "Deployment completed. Total files deployed: $($files.Count)"
      shell: pwsh
